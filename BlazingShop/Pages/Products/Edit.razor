@page "/products/editar/{id:int}"
@inject Context _context
@inject NavigationManager _navigationManager

<div class="mb-3">
    <h3 class="titulo text-center text-white border-5 p-3 bg-primary justify-content-center">Editar Produto</h3>
    <p class="text-muted">Você está editando o produto: @_model?.Title</p>
</div>


<EditForm Model="@_model" OnValidSubmit="SubmitAsync">

    <DataAnnotationsValidator />
    <ValidationSummary class="alert-danger" />

    <div class="mb-3">
        <label class="text-muted form-label" for="Title">Título</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title" />
    </div>

    <div class="mb-3">
        <label class="text-muted form-label" for="Price">Preço</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price" />
    </div>

    <div class="mb-3">
        <label class="text-muted form-label" for="CategoryId">Categoria</label>

        <InputSelect id="CategoryId" @bind-Value="_model.CategoryId" class="form-control">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Title</option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMsg))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMsg
        </div>
    }

    <button class="btn btn-primary" type="submit">Editar</button>
    <a href="/" class="btn btn-dark">Voltar</a>
</EditForm>




@code {
    [Parameter]
    public int Id { get; set; }

    private Product? _model = new();
    private List<Category> _categories = new();
    string? _errorMsg = null;

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context.Categories.AsNoTracking().OrderBy(x => x.Title).ToListAsync();

        _model = await _context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    private async Task SubmitAsync()
    {
        try
        {
            var prod = await _context.Products.FirstOrDefaultAsync(x => x.Id == Id);
            if (prod is null)
            {
                throw new Exception("Produto não encontrado");
            }
            prod.Title = _model.Title;
            prod.Price = _model.Price;
            prod.CategoryId = _model.CategoryId;

            _context.Products.Update(prod);
            await _context.SaveChangesAsync();

            _navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _errorMsg = ex.Message;
        }
    }

}
